/** Declaration file generated by dts-gen */

declare class Proton {
    constructor(integrationType?: any);

    addEmitter(emitter: any): void;

    addEventListener(type: any, listener: any): any;

    addRenderer(render: any): void;

    amendChangeTabsBug(): void;

    destroy(...args: any[]): void;

    destroyAllEmitters(): void;

    dispatchEvent(type: any, args: any): any;

    emittersUpdate(elapsed: any): void;

    getAllParticles(): any;

    getCount(): any;

    hasEventListener(type: any): any;

    removeAllEventListeners(type: any): void;

    removeEmitter(emitter: any): void;

    removeEventListener(type: any, listener: any): void;

    removeRenderer(render: any): void;

    update(): void;

    static CustomRenderer(element: any): any;

    static DEFAULT_INTERVAL: number;

    static EMITTER_ADDED: string;

    static EMITTER_REMOVED: string;

    static EULER: string;

    static MEASURE: number;

    static PARTICLE_CREATED: string;

    static PARTICLE_DEAD: string;

    static PARTICLE_SLEEP: string;

    static PARTICLE_UPDATE: string;

    static PROTON_UPDATE: string;

    static PROTON_UPDATE_AFTER: string;

    static RK2: string;

    static USE_CLOCK: boolean;

    static amendChangeTabsBug: boolean;

    static createArraySpan(arr: any): any;

    static easeInBack(value: any): any;

    static easeInCirc(value: any): any;

    static easeInCubic(value: any): any;

    static easeInExpo(value: any): any;

    static easeInOutBack(value: any): any;

    static easeInOutCirc(value: any): any;

    static easeInOutCubic(value: any): any;

    static easeInOutExpo(value: any): any;

    static easeInOutQuad(value: any): any;

    static easeInOutQuart(value: any): any;

    static easeInOutSine(value: any): any;

    static easeInQuad(value: any): any;

    static easeInQuart(value: any): any;

    static easeInSine(value: any): any;

    static easeLinear(value: any): any;

    static easeOutBack(value: any): any;

    static easeOutCirc(value: any): any;

    static easeOutCubic(value: any): any;

    static easeOutExpo(value: any): any;

    static easeOutQuad(value: any): any;

    static easeOutQuart(value: any): any;

    static easeOutSine(value: any): any;

    static getEasing(ease: any): any;

    static getSpan(a: any, b: any, center?: any): any;

}

declare namespace Proton {
    class A {
        constructor(a: any, b: any, life: any, easing: any);

        applyBehaviour(particle: any, time: any, index: any): void;

        initialize(particle: any): void;

        reset(a: any, b: any, life: any, easing: any): void;

        static id: number;

    }

    class Alpha {
        constructor(a: any, b: any, life?: any, easing?: any);

        applyBehaviour(particle: any, time: any, index: any): void;

        initialize(particle: any): void;

        reset(a: any, b: any, life: any, easing: any): void;

        static id: number;

    }

    class ArraySpan {
        constructor(color: any);

        getValue(): any;

        static createArraySpan(arr: any): any;

        static getSpanValue(pan: any): any;

        static setSpanValue(a: any, b: any, c: any): any;

    }

    class Attraction {
        constructor(targetPosition: any, force: any, radius: any, life: any, easing: any);

        applyBehaviour(particle: any, time: any, index: any): void;

        reset(targetPosition: any, force: any, radius: any, life: any, easing: any): void;

        static id: number;

    }

    class B {
        constructor(image: any, w: any, h: any);

        initialize(particle: any): void;

        setSpanValue(image: any): any;

    }

    class Behaviour {
        constructor(life: any, easing: any);

        calculate(particle: any, time: any, index: any): void;

        destroy(): void;

        initialize(particle: any): void;

        normalizeForce(force: any): any;

        normalizeValue(value: any): any;

        reset(life: any, easing: any): void;

        static id: number;

    }

    class BehaviourEmitter {
        constructor(conf: any);

        addSelfBehaviour(...args: any[]): void;

        removeSelfBehaviour(behaviour: any): void;

        update(time: any): void;

    }

    class Body {
        constructor(image: any, w: any, h: any);

        initialize(particle: any): void;

        setSpanValue(image: any): any;

    }

    class CanvasRenderer {
        constructor(element: any);

        addImg2Body(img: any, particle: any): void;

        createBuffer(image: any): any;

        drawCircle(particle: any): void;

        drawImage(particle: any): void;

        onParticleCreated(particle: any): void;

        onParticleDead(particle: any): void;

        onParticleUpdate(particle: any): void;

        onProtonUpdate(): void;

        resize(width: any, height: any): void;

    }

    class CircleZone {
        constructor(x: any, y: any, radius: any);

        crossing(particle: any): void;

        getGradient(particle: any): any;

        getPosition(): any;

        getSymmetric(particle: any): void;

        setCenter(x: any, y: any): void;

    }

    class Collision {
        constructor(emitter: any, mass: any, callback: any, life: any, easing: any);

        applyBehaviour(particle: any, time: any, index: any): void;

        reset(emitter: any, mass: any, callback: any, life: any, easing: any): void;

        static id: number;

    }

    class Color {
        constructor(a: any, b: any, life?: any, easing?: any);

        applyBehaviour(particle: any, time: any, index: any): void;

        initialize(particle: any): void;

        reset(a: any, b: any, life: any, easing: any): void;

        static id: number;

    }

    class CrossZone {
        constructor(zone: any, crossType: any, life: any, easing: any);

        applyBehaviour(particle: any, time: any, index: any): void;

        reset(zone: any, crossType: any, life: any, easing: any): void;

        static id: number;

    }

    class Cyclone {
        constructor(angle: any, force: any, life: any, easing: any);

        applyBehaviour(particle: any, time: any, index: any): void;

        initialize(particle: any): void;

        reset(angle: any, force: any, life: any, easing: any): void;

        setAngleAndForce(angle: any, force: any): void;

        static id: number;

    }

    class DomRenderer {
        constructor(element: any);

        addImg2Body(img: any, particle: any): void;

        bodyReady(particle: any): any;

        createBody(body: any, particle: any): any;

        createCircle(particle: any): any;

        createSprite(body: any, particle: any): any;

        onParticleCreated(particle: any): void;

        onParticleDead(particle: any): void;

        onParticleUpdate(particle: any): void;

    }

    class EaselRenderer {
        constructor(element: any, stroke: any);

        createCircle(particle: any): void;

        createSprite(particle: any): void;

        onParticleCreated(particle: any): void;

        onParticleDead(particle: any): void;

        onParticleUpdate(particle: any): void;

    }

    class Emitter {
        p: {
            x: number,
            y: number
        }
        rate?: Proton.Rate;
        constructor(...args: any[]);

        addBehaviour(...args: any[]): void;

        addEventListener(type: any, listener: any): any;

        addInitialize(...args: any[]): void;

        addSelfInitialize(initialize: any): void;

        createParticle(initialize: any, behaviour: any): any;

        destroy(): void;

        dispatch(event: any, target: any): void;

        dispatchEvent(type: any, args: any): any;

        emit(totalTime: any, life?: any): void;

        emitting(time: any): void;

        hasEventListener(type: any): any;

        integrate(time: any): void;

        preEmit(time: any): void;

        remove(): void;

        removeAllBehaviours(): void;

        removeAllEventListeners(type: any): void;

        removeAllInitializers(): void;

        removeAllParticles(): void;

        removeBehaviour(behaviour: any): any;

        removeEventListener(type: any, listener: any): void;

        removeInitialize(initializer: any): void;

        setupParticle(particle: any, initialize: any, behaviour: any): void;

        stop(): void;

        update(time: any): void;

    }

    class F {
        constructor(fx: any, fy: any, life: any, easing: any);

        applyBehaviour(particle: any, time: any, index: any): void;

        reset(fx: any, fy: any, life: any, easing: any): void;

        static id: number;

    }

    class FollowEmitter {
        constructor(mouseTarget: any, ease: any, conf: any);

        destroy(): void;

        emit(): void;

        initEventHandler(): any;

        mousemove(e: any): void;

        stop(): void;

    }

    class Force {
        constructor(fx: any, fy: any, life: any, easing: any);

        applyBehaviour(particle: any, time: any, index: any): void;

        reset(fx: any, fy: any, life: any, easing: any): void;

        static id: number;

    }

    class G {
        constructor(g: any, life: any, easing: any);

        reset(g: any, life: any, easing: any): void;

        static id: number;

    }

    class Gravity {
        constructor(g: any, life?: any, easing?: any);

        reset(g: any, life: any, easing: any): void;

        static id: number;

    }

    class GravityWell {
        constructor(centerPoint: any, force: any, life: any, easing: any);

        applyBehaviour(particle: any, time: any, index: any): void;

        initialize(particle: any): void;

        reset(centerPoint: any, force: any, life: any, easing: any): void;

        static id: number;

    }

    class ImageZone {
        constructor(imageData: any, x: any, y: any, d: any);

        crossing(particle: any): void;

        getBound(x: any, y: any): any;

        getColor(x: any, y: any): any;

        getPosition(): any;

        reset(imageData: any, x: any, y: any, d: any): void;

        setVectors(): any;

    }

    class Init {
        constructor();

        init(emitter: any, particle: any): void;

        initialize(target: any): void;

        reset(): void;

    }

    class Initialize {
        constructor();

        init(emitter: any, particle: any): void;

        initialize(target: any): void;

        reset(): void;

    }

    class L {
        constructor(a: any, b: any, c: any);

        initialize(target: any): void;

    }

    class Life {
        constructor(a: any, b?: any, c?: any);

        initialize(target: any): void;

    }

    class LineZone {
        constructor(x1: any, y1: any, x2: any, y2: any, direction: any);

        crossing(particle: any): void;

        getDirection(x: any, y: any): any;

        getDistance(x: any, y: any): any;

        getGradient(): any;

        getLength(): any;

        getPosition(): any;

        getSymmetric(v: any): any;

        rangeOut(particle: any): any;

    }

    class M {
        constructor(a: any, b: any, c: any);

        initialize(target: any): void;

    }

    class Mass {
        constructor(a: any, b: any, c: any);

        initialize(target: any): void;

    }

    class P {
        constructor(zone: any);

        initialize(target: any): void;

        reset(zone: any): void;

    }

    class Particle {
        constructor(conf: any);

        addBehaviour(behaviour: any): void;

        addBehaviours(behaviours: any): void;

        applyBehaviours(time: any, index: any): void;

        destroy(): void;

        getDirection(): any;

        removeAllBehaviours(): void;

        removeBehaviour(behaviour: any): void;

        reset(): any;

        update(time: any, index: any): void;

    }

    class PixelRenderer {
        constructor(element: any, rectangle: any);

        createImageData(rectangle: any): void;

        onParticleCreated(particle: any): void;

        onParticleDead(particle: any): void;

        onParticleUpdate(particle: any): void;

        onProtonUpdate(): void;

        onProtonUpdateAfter(): void;

        resize(width: any, height: any): void;

        setPixel(imagedata: any, x: any, y: any, particle: any): void;

    }

    class PixiRenderer {
        constructor(element: any, stroke: any);

        createBody(body: any, particle: any): any;

        createCircle(particle: any): any;

        createSprite(body: any): any;

        destroy(particles: any): void;

        onParticleCreated(particle: any): void;

        onParticleDead(particle: any): void;

        onParticleUpdate(particle: any): void;

        onProtonUpdate(): void;

        setPIXI(PIXI: any): void;

        transform(particle: any, target: any): void;

    }

    class PointZone {
        constructor(x: any, y: any);

        crossing(particle: any): void;

        getPosition(): any;

    }

    class Polar {
        constructor(r: any, tha: any);

        clear(): any;

        clone(): any;

        copy(p: any): any;

        equals(v: any): any;

        getX(): any;

        getY(): any;

        normalize(): any;

        set(r: any, tha: any): any;

        setR(r: any): any;

        setTha(tha: any): any;

        toVector(): any;

    }

    class Polar2D {
        constructor(r: any, tha: any);

        clear(): any;

        clone(): any;

        copy(p: any): any;

        equals(v: any): any;

        getX(): any;

        getY(): any;

        normalize(): any;

        set(r: any, tha: any): any;

        setR(r: any): any;

        setTha(tha: any): any;

        toVector(): any;

    }

    class Pool {
        constructor(num: any);

        createOrClone(target: any, params: any): any;

        destroy(): void;

        expire(target: any): any;

        get(target: any, params: any, uid: any): any;

        getCache(...args: any[]): any;

        getCount(): any;

    }

    class Position {
        constructor(zone: any);

        initialize(target: any): void;

        reset(zone: any): void;

    }

    class R {
        constructor(a: any, b: any, c: any);

        initialize(particle: any): void;

        reset(a: any, b: any, c: any): void;

    }

    class RD {
        constructor(driftX: any, driftY: any, delay: any, life: any, easing: any);

        applyBehaviour(particle: any, time: any, index: any): void;

        initialize(particle: any): void;

        reset(driftX: any, driftY: any, delay: any, life: any, easing: any): void;

        static id: number;

    }

    class Radius {
        constructor(a: any, b: any, c?: any);

        initialize(particle: any): void;

        reset(a: any, b: any, c: any): void;

    }

    class RandomDrift {
        constructor(driftX: any, driftY: any, delay: any, life: any, easing: any);

        applyBehaviour(particle: any, time: any, index: any): void;

        initialize(particle: any): void;

        reset(driftX: any, driftY: any, delay: any, life: any, easing: any): void;

        static id: number;

    }

    class Rate {
        constructor(numpan: any, timepan: any);

        getValue(time: any): any;

        init(): void;

    }

    class RectZone {
        constructor(x: any, y: any, width: any, height: any);

        crossing(particle: any): void;

        getPosition(): any;

    }

    class Rectangle {
        constructor(x: any, y: any, w: any, h: any);

        contains(x: any, y: any): any;

    }

    class Repulsion {
        constructor(targetPosition: any, force: any, radius: any, life: any, easing: any);

        reset(targetPosition: any, force: any, radius: any, life: any, easing: any): void;

        static id: number;

    }

    class Rotate {
        constructor(influence: any, b: any, style: any, life: any, easing: any);

        applyBehaviour(particle: any, time: any, index: any): void;

        initialize(particle: any): void;

        reset(a: any, b: any, style: any, life: any, easing: any): void;

        static id: number;

    }

    class S {
        constructor(a: any, b: any, life: any, easing: any);

        applyBehaviour(particle: any, time: any, index: any): void;

        initialize(particle: any): void;

        reset(a: any, b: any, life: any, easing: any): void;

        static id: number;

    }

    class Scale {
        constructor(a: any, b: any, life?: any, easing?: any);

        applyBehaviour(particle: any, time: any, index: any): void;

        initialize(particle: any): void;

        reset(a: any, b: any, life: any, easing: any): void;

        static id: number;

    }

    class Span {
        constructor(a: any, b: any, center: any);

        getValue(...args: any[]): any;

        static getSpanValue(pan: any): any;

        static setSpanValue(a: any, b: any, c: any): any;

    }

    class V {
        constructor(rpan: any, thapan: any, type: any);

        initialize(target: any): void;

        normalizeVelocity(vr: any): any;

        reset(rpan: any, thapan: any, type: any): void;

    }

    class Vector {
        constructor(x: any, y: any);

        add(v: any, w: any): any;

        addVectors(a: any, b: any): any;

        addXY(a: any, b: any): any;

        clear(): any;

        clone(): any;

        copy(v: any): any;

        distanceTo(v: any): any;

        distanceToSquared(v: any): any;

        divideScalar(s: any): any;

        dot(v: any): any;

        equals(v: any): any;

        getGradient(): any;

        length(): any;

        lengthSq(): any;

        lerp(v: any, alpha: any): any;

        multiplyScalar(s: any): any;

        negate(): any;

        normalize(): any;

        rotate(tha: any): any;

        set(x: any, y: any): any;

        setX(x: any): any;

        setY(y: any): any;

        sub(v: any, w: any): any;

        subVectors(a: any, b: any): any;

    }

    class Vector2D {
        constructor(x: any, y: any);

        add(v: any, w: any): any;

        addVectors(a: any, b: any): any;

        addXY(a: any, b: any): any;

        clear(): any;

        clone(): any;

        copy(v: any): any;

        distanceTo(v: any): any;

        distanceToSquared(v: any): any;

        divideScalar(s: any): any;

        dot(v: any): any;

        equals(v: any): any;

        getGradient(): any;

        length(): any;

        lengthSq(): any;

        lerp(v: any, alpha: any): any;

        multiplyScalar(s: any): any;

        negate(): any;

        normalize(): any;

        rotate(tha: any): any;

        set(x: any, y: any): any;

        setX(x: any): any;

        setY(y: any): any;

        sub(v: any, w: any): any;

        subVectors(a: any, b: any): any;

    }

    class Velocity {
        constructor(rpan: any, thapan: any, type: any);

        initialize(target: any): void;

        normalizeVelocity(vr: any): any;

        reset(rpan: any, thapan: any, type: any): void;

    }

    class WebGLRenderer {
        constructor(element: any);

        addImg2Body(img: any, particle: any): void;

        blendEquation(A: any): void;

        blendFunc(A: any, B: any): void;

        createCircle(raidus: any): any;

        drawImg2Canvas(particle: any): void;

        getFragmentShader(): any;

        getShader(gl: any, str: any, fs: any): any;

        getVertexShader(): any;

        init(proton: any): void;

        initBuffers(): void;

        initShaders(): void;

        initVar(): void;

        onParticleCreated(particle: any): void;

        onParticleDead(particle: any): void;

        onParticleUpdate(particle: any): void;

        onProtonUpdate(): void;

        resize(width: any, height: any): void;

        setMaxRadius(radius: any): void;

        updateMatrix(particle: any): void;

    }

    class WebGlRenderer {
        constructor(element: any);

        addImg2Body(img: any, particle: any): void;

        blendEquation(A: any): void;

        blendFunc(A: any, B: any): void;

        createCircle(raidus: any): any;

        drawImg2Canvas(particle: any): void;

        getFragmentShader(): any;

        getShader(gl: any, str: any, fs: any): any;

        getVertexShader(): any;

        init(proton: any): void;

        initBuffers(): void;

        initShaders(): void;

        initVar(): void;

        onParticleCreated(particle: any): void;

        onParticleDead(particle: any): void;

        onParticleUpdate(particle: any): void;

        onProtonUpdate(): void;

        resize(width: any, height: any): void;

        setMaxRadius(radius: any): void;

        updateMatrix(particle: any): void;

    }

    class Zone {
        constructor();

        crossing(particle: any): void;

        getPosition(): void;

    }

    namespace ColorUtil {
        function getHex16FromParticle(p: any): any;

        function hexToRgb(h: any): any;

        function rgbToHex(rbg: any): any;

    }

    namespace Debug {
        function addEventListener(proton: any, func: any): any;

        function drawEmitter(proton: any, canvas: any, emitter: any, clear: any): void;

        function drawZone(proton: any, canvas: any, zone: any, clear: any): void;

        function getStyle(...args: any[]): any;

    }

    namespace Mat3 {
        function create(mat3: any): any;

        function inverse(mat: any, mat3: any): any;

        function multiply(mat: any, mat2: any, mat3: any): any;

        function multiplyVec2(m: any, vec: any, mat3: any): any;

        function set(mat1: any, mat2: any): any;

    }

    namespace MathUtil {
        const Infinity: number;

        const N180_PI: number;

        const PI: number;

        const PI_180: number;

        const PI_2: number;

        const PIx2: number;

        function degreeTransform(a: any): any;

        function floor(num: any, ...args: any[]): any;

        function isInfinity(num: any): any;

        function randomAToB(a: any, b: any, ...args: any[]): any;

        function randomColor(): any;

        function randomFloating(center: any, f: any, isInt: any): any;

        function randomZone(display: any): void;

        function toColor16(num: any): any;

    }

    namespace Util {
        function assign(target: any, source: any): any;

        function classApply(constructor: any, ...args: any[]): any;

        function destroyAll(arr: any, ...args: any[]): void;

        function emptyArray(arr: any): void;

        function emptyObject(obj: any, ...args: any[]): void;

        function getImageData(context: any, image: any, rect: any): any;

        function getRandFromArray(arr: any): any;

        function hasProp(target: any, key: any): any;

        function initValue(value: any, defaults: any): any;

        function isArray(value: any): any;

        function setProp(target: any, props: any): any;

        function setVectorVal(particle: any, ...args: any[]): void;

        function toArray(arr: any): any;

    }

    namespace ease {
        function easeInBack(value: any): any;

        function easeInCirc(value: any): any;

        function easeInCubic(value: any): any;

        function easeInExpo(value: any): any;

        function easeInOutBack(value: any): any;

        function easeInOutCirc(value: any): any;

        function easeInOutCubic(value: any): any;

        function easeInOutExpo(value: any): any;

        function easeInOutQuad(value: any): any;

        function easeInOutQuart(value: any): any;

        function easeInOutSine(value: any): any;

        function easeInQuad(value: any): any;

        function easeInQuart(value: any): any;

        function easeInSine(value: any): any;

        function easeLinear(value: any): any;

        function easeOutBack(value: any): any;

        function easeOutCirc(value: any): any;

        function easeOutCubic(value: any): any;

        function easeOutExpo(value: any): any;

        function easeOutQuad(value: any): any;

        function easeOutQuart(value: any): any;

        function easeOutSine(value: any): any;

        function getEasing(ease: any): any;

    }

}

export = Proton;
